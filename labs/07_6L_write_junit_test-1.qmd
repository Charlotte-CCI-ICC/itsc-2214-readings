---
title: Write JUnit Tests - 1
---
## Update Autograder

First, please update your autograder by running:

```bash
umm update
```

## Pre-requisite

Please go through slides on Mutation Testing, and the List of Mutators page.
Please see the Labs 6 and 7 announcement.

## Opening Project in IDE

**Project files:** [6L_writing_junit_tests-TEMPLATE.zip](https://www.dropbox.com/scl/fi/u9tr8l5vvms33gvs97dpr/6L_writing_junit_tests-TEMPLATE.zip?rlkey=4ad1h53f2kg2vyxq5mr2cx25q&st=mbnyx244&dl=1)

1. Unzip the files to preferably an `ITSC 2214` folder for this class.
2. Open Visual Studio Code.
3. Go to `File > Open Folder`. Choose the folder where you extracted the files.

## Checking Grade

You can check your grade without hitting check answer, like so:

### Using Terminal

1. Open a terminal. To open a terminal in Visual Studio Code on different operating systems:
    - **Windows:** Press ``Ctrl + ` `` or `` Ctrl + Shift + ` `` to open the integrated terminal.

    - **Mac:** Press `` Cmd + ` `` or `` Cmd + Shift + ` `` to open the integrated terminal.
2. Run the command:

    ```bash
    umm grade ./script.rhai
    ```

## Project Overview

Here is the list of files in the Calculator Package:

```
.
├── src
│   ├── Calculator
│   │   └── Calculator.java
└── test
    └── Calculator
        └── CalculatorTest.java
```

## Implementation Instructions

The `Calculator.Calculator` class is fully implemented and contains a list of methods for each basic arithmetic operation. The only method that is different from what you’d expect is `divide()`, which throws an exception if someone tries to divide by zero. This is interesting because when you write tests you will have to make sure your test tests the fact that exceptions are being thrown when expected and not being thrown when not expected.

The `Calculator.CalculatorTest` class inside `test/Calculator/CalculatorTest.java` is empty. Let’s talk about how to start writing this class.

In order to be able to write tests, you need to import a bunch of methods called assertions from a library called JUnit. Here are some example assert methods:

- `assertEquals`: takes two arguments, and checks if they are equal. If unequal, the test fails.
- `assertThrows`: takes two arguments, the first being a class, and the second being a lambda expression.

You can get the class of an exception by using `Exception.class`, for example `ArithmeticException.class` or `java.lang.ArithmeticException.class` if you’ve not imported it.

The lambda expression should include the method call that should throw an exception. You can think of it as a small convenient try block, for example:

```java
assertThrows(ArithmeticException.class, () -> c1.divide());
// or if you need multiple statements
assertThrows(ArithmeticException.class, () -> {
    Calculator c1 = new Calculator(1, 2);
    c1.divide();
});
```

See [Assertions (JUnit 5.0.1 API)](https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html) for documentation on all assertions. You might be able to find something that reduces the amount of code you need to write!

We are using JUnit 5, and the way you import these assertions for JUnit 5 is:

```java
import static org.junit.jupiter.api.Assertions.*;
```

**Note:** Make sure you’ve added `package Calculator;` to the top of the `Calculator.CalculatorTest` class file.

Every method that is meant to be a test needs to be marked with a `@Test` decorator. This helps our tool find and identify which methods are intended to be tests. You can import this decorator by saying:

```java
import org.junit.jupiter.api.Test;
```

Later, you can mark a method as a test by saying:

```java
@Test
public void testAdd() {
    // body
}
```

You might also want to import `java.lang.ArithmeticException`, that is the exception thrown by the divide method.

Next, create a class as usual:

```java
public class CalculatorTest {}
```

Inside this class, define a bunch of calculator objects. Here are some, you might find useful:

```java
public class CalculatorTest { 
    /*
    * Here is where you want to define a bunch of calculator objects   
    * So that you can use them later in your tests.   
    *   
    * The instructions document contains a list of calculator objects   
    * that might be useful to test.   
    *   
    * You can also create your own calculator objects. 
    */

    Calculator c1 = new Calculator(2, 3);
    Calculator c2 = new Calculator(-2, 3);
    Calculator c3 = new Calculator(2, -3);
    Calculator c4 = new Calculator(-2, -3);
    Calculator c5 = new Calculator(0, 0);
    Calculator c6 = new Calculator(0, 3);
    Calculator c7 = new Calculator(2, 0);
    Calculator c8 = new Calculator(0, -3);
    Calculator c9 = new Calculator(-2, 0);
}
```

Next, use the `@Test` decorator just like how it was described above to create:

a. `testAdd()`
b. `testSubtract()`
c. `testMultiply()`
d. `testDivide()`

Implement all the above tests, and run them to make sure they’re all passing.

Once your tests are passing, use the above instructions to check your grade within the IDE.

Make sure you modify your tests or source code to get rid of all surviving mutations. Once you are done, hit submit.

## Rubric

- Unit tests for `Calculator.Calculator` should pass (10 points)
- There should be no surviving mutants. Points are only awarded for no surviving mutations (40 points)

## Submission

{{< include submission_instructions.qmd  >}}
